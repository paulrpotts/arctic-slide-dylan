# About This Project

This is an implementation, in Dylan, of the core game logic from the
old Macintosh Polar game. See:

https://thepottshouse.org/paul/portfolio/The_Polar_Game_in_Dylan.html

I wrote it for learning and experimental purposes, to test the current
OpenDylan compiler and runtime, and to consider some design alternatives.
You are free to use it in any way that seems right to you, as far as I'm
concerned, but please make note of possible intellectual property issues.

Many years ago there existed on old-school MacOS a small game called
"Polar." It was a very simple game, written by a guy (Go Endo) who may
have been a student at the same time I was a student. It was so simple,
but I was fond of it --- fond to save it for many years with the
intention of studying its design and gameplay and perhaps attempting
to re-implement it.

The original game had a copyright notice (1990), and was shareware
($2.00). From what I can tell, Polar was never popular and the Internet
seems to have largely forgotten it, which is unjust, in my opionion,
because it is a very clever and fun little game.

I'm not sure how the original author would feel about me taking apart
and trying to re-implement his game, or whether they would try to assert
that intellectual property law prevented me from doing so, but I've been
assuming that they do not care, especially given that it is 35 years
later, I'm not attempting to make any money on this effort, and in this
case especially, is easier to ask forgiveness than permission.

I am not a lawyer, but I believe Go Endo could still have a valid
copyright claim to his implementation, including his original graphics
and text. Does that forbid anyone else from reproducing the game's
play mechanics or level design? I don't know. If you plan to try to turn
this into a finished game, I recommend consulting an attorney who can
advise you on intellectual property issues.

# Building and Running the Code with Open Dylan

I have tested this most recently with the 2024 release of OpenDylan
running on Ubuntu Linux 22.04.5 "Jammy Jellyfish," on an Intel NUC with
an i5 CPU. I am grateful as always to the work of the many volunteers
who have, over the years, continued to keep it possible to build and
run Dylan code.

OpenDylan's build system does not seem to be very GitHub-friendly at
the moment. By that I mean that I would like to commit and push only a
minimal set of source files necessary for building the project, so that
other programmers can clone the repo and then simply build it. I don't
want to push directories full of build products. The tools now do not
seem to offer an easy way to just pull down a .dylan file and build it.
Instead, the only documented path I could find is to use the tools to
build an empty starter project, and then modify it.

So, I recommend doing these steps:

## Set Up OpenDylan

Get OpenDylan installed on your machine and set up in your PATH. See:
https://opendylan.org/index.html

In my case, I put everything from the bzip2 file into

/opt/opendylan-2024.1

and then added

export PATH=/opt/opendylan-2024.1/bin:$PATH

to my ~/.bashrc file.

Now if I type dylan-compiler -version

I get "Version 2024.1."

## Pull Down My Source

Use git clone for this.

## Make a Starter Dylan Project

Working in your arctic-slide-dylan sanbox, run:

dylan new application arctic-slide-od

This will create an arctic-slide-od directory with _packages, registry, and
tests sub-directories, create some boilerplate code files, download some packages,
etc. It shouldn't modify my files.

## Build and Run the Starter Project

Verify that you can build and run the starter project before making any changes
to it. 

cd arctic-slide-od

dylan build --all

The first build will take a while. I get a number of warnings about "multiple
applicable copy-down methods" as the standard libraries are build. It would be
nice if these weren't there, but I don't think they are critical.

After it's done, you should be able to run the executable:

_build/bin/arctic-slide-od-app

All it does is print "Hello world!"

## Modify arctic-slide-od-app.dylan

Now, REPLACE the generated

arctic-slide-od-app.dylan

file in the arctic-slide-od directory with my file of the
same name.

### Build Again and Run

Now you should be able to perform the build again:

dylan build --all

The build should be much faster this time. Then, run the
application containing my code:

_build/bin/arctic-slide-od-app

You should see output that starts like this:

    Testing the arctic-slide game mechanics with test board 1
    tre ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ tre ___ ___ ___ ___ ___ ice ___ ___ 
    tre ___ bom ___ mtn ___ hea ice hea ___ ___ ___ ___ ___ ___ ___ ___ ___ tre ___ ___ tre ___ ___ 
    tre ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ hea ___ ___ ___ mtn hou ___ ___ 
    tre tre ___ ___ ___ ___ tre ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
    Penguin changed dir to east
    pushTile: walkable
    Penguin moved to 0, 1

and ends like this:

    Heart count reached zero, level cleared!
    tre ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ tre ice ___ ___ ___ ___ ___ ___ ___ 
    tre ___ ___ ___ mtn ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ tre ___ ___ tre ___ ___ 
    tre ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ hou ___ ___ 
    tre tre ___ ___ ___ ___ tre ice ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 

There is no graphical user interface at present, just a log of the code playing
the first level of the game by itself, as this project was originally all about
studying possible implementations of the game mechanics. This allowed me to make
small changes to the generic functions and quickly test whether the game still
works as expected. The game board map shows the positions of trees, bombs,
mountains, hearts, ice blocks, and the house. It does not currently show the
position of the penguin, although now that I think of it, that would be a nice
upgrade. A GUI would make a nice upgrade as well!

Happy programming!
